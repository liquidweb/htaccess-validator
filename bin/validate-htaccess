#!/usr/bin/env bash
#
# This script injects a file into the current Apache2 environment temporarily
# in order to check its syntax.
#
# USAGE:
#
#     validate-htaccess <file>
#
# EXAMPLE:
#
#     validate-htaccess /path/to/some/config/file.conf
#     validate-htaccess /path/to/.htaccess
#
# EXIT CODES:
#
# 0 - The syntax is valid.
# 1 - The syntax is invalid, see STDERR for details.
# 2 - The httpd binary could not be found.
# 3 - The given file does not exist.
# 4 - The current Apache configuration (without including the file being tested)
#     appears to be invalid, so we cannot safely proceed.
#
# Author: Liquid Web
# License: MIT

file=${1:?No configuration file specified.}

# Ensure that httpd is available.
if [ ! command -v httpd &> /dev/null ] && [! command -v apache2ctl &> /dev/null ] ; then
    echo 'Unable to find the httpd binary or apache2ctl script, is Apache2 installed?' 1>&2
    exit 2
fi

command -v httpd &> /dev/null
exit_code=$?

if [ $exit_code -eq 0 ]; then
    httpd="httpd"
fi;

command -v apache2ctl &> /dev/null
exit_code=$?

if [ $exit_code -eq 0 ]; then
    httpd="apache2ctl"
fi;

# Verify the given file actually exists.
if [ ! -f "$file" ]; then
    echo "File ${file} does not exist, aborting." 1>&2
    exit 3
fi

# Verify that the current configuration passes; if it doesn't, it won't
# magically be fixed by throwing more on top of it.
if [ ! ${httpd} -t -C 'ServerName example.com' 2> /dev/null ]; then
    echo "The current Apache environment is misconfigured.
Please resolve these issues before attempting to validate ${file}." 1>&2
    exit 4
fi

# Get the name of the current configuration file.
current_config=$(${httpd} -V \
    | grep -E -o -e 'SERVER_CONFIG_FILE="(.+)"' \
    | sed 's/SERVER_CONFIG_FILE=//; s/"//g')

# Ensure the file can be loaded.
tmpfile=$(mktemp)
cat "$file" > "$tmpfile"

# Now, use Apache to validate itself, injecting $FILE into the current
# server environment.
results=$(${httpd} -t -C "Include ${current_config}" -f "$tmpfile" -C "ServerName example.com" 2>&1)
exit_code=$?

# Remove the temp file.
rm "$tmpfile"

# If the check passed, there's nothing more to do.
if [ $exit_code -eq 0 ]; then
    exit
fi

# Something went wrong, so we need to parse the results.
tmpfilename=${tmpfile##*/}
echo "$results" | sed -E 's/^.+'"$tmpfilename"': //' 1>&2
exit 1
